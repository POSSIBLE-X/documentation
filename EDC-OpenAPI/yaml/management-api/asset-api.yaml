openapi: 3.0.1
info:
  description: "This contains both the current and the new Asset API, which accepts\
    \ JSON-LD and will become the standard API once the Dataspace Protocol is stable.\
    \ The new Asset API is prefixed with /v2, and the old endpoints have been deprecated.\
    \ At that time of switching, the old API will be removed, and this API will be\
    \ available without the /v2 prefix."
  title: Asset API
paths:
  /v2/assets:
    post:
      description: Creates a new asset together with a data address
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetEntryNewDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponseDto'
          description: Asset was created successfully. Returns the asset Id and created
            timestamp
        "400":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: "Could not create asset, because an asset with that ID already\
            \ exists"
      tags:
      - Asset
    put:
      description: "Updates an asset with the given ID if it exists. If the asset\
        \ is not found, no further action is taken. DANGER ZONE: Note that updating\
        \ assets can have unexpected results, especially for contract offers that\
        \ have been sent out or are ongoing in contract negotiations."
      operationId: updateAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdateRequestDto'
      responses:
        "200":
          description: Asset was updated successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: "Request was malformed, e.g. id was null"
        "404":
          description: "Asset could not be updated, because it does not exist."
      tags:
      - Asset
  /v2/assets/request:
    post:
      description: ' all assets according to a particular query'
      operationId: requestAssets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuerySpecDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/AssetResponseDto'
          description: The assets matching the query
        "400":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: Request body was malformed
      tags:
      - Asset
  /v2/assets/{assetId}/dataaddress:
    put:
      description: Updates a DataAddress for an asset with the given ID.
      operationId: updateDataAddress
      parameters:
      - in: path
        name: assetId
        required: true
        schema:
          type: string
          example: null
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdateRequestDto'
      responses:
        "200":
          description: Asset was updated successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: An asset with the given ID does not exist
      tags:
      - Asset
  /v2/assets/{id}:
    delete:
      description: "Removes an asset with the given ID if possible. Deleting an asset\
        \ is only possible if that asset is not yet referenced by a contract agreement,\
        \ in which case an error is returned. DANGER ZONE: Note that deleting assets\
        \ can have unexpected results, especially for contract offers that have been\
        \ sent out or ongoing or contract negotiations."
      operationId: removeAsset
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          description: Asset was deleted successfully
        "400":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: An asset with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: "The asset cannot be deleted, because it is referenced by a\
            \ contract agreement"
      tags:
      - Asset
    get:
      description: Gets an asset with the given ID
      operationId: getAsset
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponseDto'
          description: The asset
        "400":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: An asset with the given ID does not exist
      tags:
      - Asset
  /v2/assets/{id}/dataaddress:
    get:
      description: Gets a data address of an asset with the given ID
      operationId: getAssetDataAddress
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAddressDto'
          description: The data address
        "400":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                type: array
                example: null
                items:
                  $ref: '#/components/schemas/ApiErrorDetail'
          description: An asset with the given ID does not exist
      tags:
      - Asset
components:
  schemas:
    ApiErrorDetail:
      type: object
      example: null
      properties:
        invalidValue:
          type: string
          example: null
        message:
          type: string
          example: null
        path:
          type: string
          example: null
        type:
          type: string
          example: null
    Asset:
      type: object
      example: null
      properties:
        createdAt:
          type: integer
          format: int64
          example: null
        id:
          type: string
          example: null
        privateProperties:
          type: object
          additionalProperties:
            type: object
            example: null
          example: null
        properties:
          type: object
          additionalProperties:
            type: object
            example: null
          example: null
    AssetEntryNewDto:
      type: object
      example: null
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
        dataAddress:
          $ref: '#/components/schemas/DataAddress'
    AssetResponseDto:
      type: object
      example: null
      properties:
        '@context':
          type: object
          example: null
        '@id':
          type: string
          example: null
        '@type':
          type: string
          example: null
        createdAt:
          type: integer
          format: int64
          example: null
        privateProperties:
          type: object
          additionalProperties:
            type: object
            example: null
          example: null
        properties:
          type: object
          additionalProperties:
            type: object
            example: null
          example: null
    AssetUpdateRequestDto:
      type: object
      example: null
      properties:
        '@context':
          type: object
          example: null
        '@type':
          type: string
          example: null
        privateProperties:
          type: object
          additionalProperties:
            type: object
            example: null
          example: null
        properties:
          type: object
          additionalProperties:
            type: object
            example: null
          example: null
      required:
      - properties
    CriterionDto:
      type: object
      example: null
      properties:
        '@context':
          type: object
          example: null
        '@type':
          type: string
          example: null
        operandLeft:
          type: object
          example: null
        operandRight:
          type: object
          example: null
        operator:
          type: string
          example: null
      required:
      - operandLeft
      - operator
    DataAddress:
      type: object
      example: null
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
            example: null
          example: null
    DataAddressDto:
      type: object
      example: null
      properties:
        '@context':
          type: object
          example: null
        '@type':
          type: string
          example: null
        properties:
          type: object
          additionalProperties:
            type: string
            example: null
          example: null
      required:
      - properties
    IdResponseDto:
      type: object
      example: null
      properties:
        '@context':
          type: object
          example: null
        '@id':
          type: string
          example: null
        '@type':
          type: string
          example: null
        createdAt:
          type: integer
          format: int64
          example: null
    JsonArray:
      type: array
      example: null
      items:
        $ref: '#/components/schemas/JsonValue'
      properties:
        empty:
          type: boolean
          example: null
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
          example: null
    JsonObject:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/JsonValue'
      example: null
      properties:
        empty:
          type: boolean
          example: null
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
          example: null
    JsonValue:
      type: object
      example: null
      properties:
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
          example: null
    QuerySpecDto:
      type: object
      example: null
      properties:
        '@context':
          type: object
          example: null
        '@type':
          type: string
          example: null
        filterExpression:
          type: array
          example: null
          items:
            $ref: '#/components/schemas/CriterionDto'
        limit:
          type: integer
          format: int32
          example: null
        offset:
          type: integer
          format: int32
          example: null
        sortField:
          type: string
          example: null
        sortOrder:
          type: string
          enum:
          - ASC
          - DESC
          example: null
